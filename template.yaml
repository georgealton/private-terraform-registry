Transform: AWS::Serverless-2016-10-31

Parameters:
  ParentDomain:
    Type: String
    Description: Your domain name, eh megacorp.com

  DomainName:
    Type: String
    Description: name of subdomain for registry, eg terraform

  CertificateARN:
    Type: String
    Description: >
      If you already have a certificate in AWS Certificate Manager that covers the DomainName supply the ARN here. This will skip creation
      of a new certificate.
    Default: ""

  APIEndpointType:
    Type: String
    Description: >
      REGIONAL or EDGE . When using EDGE, the Certificate must be located in us-east-1. Either deploy the entire stack in us-east-1 or pass in the arn of a certificate in us-east-1.
    AllowedValues:
      - REGIONAL
      - EDGE
    Default: REGIONAL

  SAMLMetadataURL:
    Type: String
    Default: ""

Conditions:
  CreateCertificate: !Equals [!Ref CertificateARN, ""]
  RegionalAPIEndpoint: !Equals [!Ref APIEndpointType, REGIONAL]
  SAMLIdP: !Not [!Equals [!Ref SAMLMetadataURL, ""]]

Resources:
  Storage:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
            NoncurrentVersionExpirationInDays: 21
            Status: Enabled
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  DB:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  Certificate:
    Condition: CreateCertificate
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub ${DomainName}.${ParentDomain}
      ValidationMethod: DNS

  API:
    DependsOn:
      - Role
      - WebHookRole
    Type: AWS::Serverless::Api
    Properties:
      Domain:
        CertificateArn: !Ref Certificate
        DomainName: !Sub ${DomainName}.${ParentDomain}
        HostedZoneName: !Ref ParentDomain 
      StageName: main
      EndpointConfiguration:
        Type: !Ref APIEndpointType
      DisableExecuteApiEndpoint: true
      MethodSettings:
        - ResourcePath: /*
          HttpMethod: "*"
          DataTraceEnabled: true
          LoggingLevel: ERROR
      Variables:
        registry_db: !Ref DB
        event_bus: !GetAtt EventBus.Arn
        github_host: github.com
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: openapi.yaml

  Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DynamoDBAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub apigateway.${AWS::URLSuffix}
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DBRead
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                Resource: !GetAtt DB.Arn
              - Effect: Allow
                Action: stepfunctions:StateExecution
                Resource: !GetAtt GitHubWebHookRouter.Arn

  EventRouterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.${AWS::URLSuffix}
            Action: sts:AssumeRole
      Policies:
        - PolicyName: WriteEvents
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: events:PutEvents
                Resource: !GetAtt EventBus.Arn

  GitHubWebHookRouter:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionS3Location: src/entrypoints/webhooks-github.asl.yaml
      RoleArn: !GetAtt EventRouterRole.Arn
      TracingConfiguration:
        Enabled: True

  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: TFRegistry

  WebHookRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub events.${AWS::URLSuffix}
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EventBridge
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: events:PutEvents
                Resource: !GetAtt EventBus.Arn

  Authorizer:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub RegistryAuthorizer-${AWS::Region}
      Architectures:
        - arm64
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = (event, context) => console.log("hello world")
      Runtime: nodejs16.x
      Role: !GetAtt AuthorizerExecutionRole.Arn
      TracingConfig:
        Mode: Active
      MemorySize: 128

  AuthorizerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub lambda.${AWS::URLSuffix}
            Action: sts:AssumeRole

  UserPool:
    Type: AWS::Cognito::UserPool

  UserClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: USER_CLIENT
      UserPoolId: !Ref UserPool
      CallbackURLs:
        - http://localhost
      DefaultRedirectURI: http://localhost
      AllowedOAuthFlowsUserPoolClient: true
      ReadAttributes:
        - email
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
      SupportedIdentityProviders:
        - !If [SAMLIdP, !Ref SAMLIdentityProvider, !Ref AWS::NoValue]

  VCSClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: VCS_CLIENT

  SAMLIdentityProvider:
    Condition: SAMLIdP
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      ProviderName: SAMLIdentityProvider
      ProviderType: SAML
      UserPoolId: !Ref UserPool
      ProviderDetails:
        MetadataURL: !Ref SAMLMetadataURL
      AttributeMapping:
        email: "Attribute"

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Ref API # TODO -- this is a lowercase unique enough ide

Outputs:
  OIDCWellKnownCOnfigurationUrl:
    Description: OIDC /.well-known/openid-configuration Url
    Value: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}/.well-known/openid-configuration"

  OIDCJWKSJSONUrl:
    Description: OIDC /.well-known/jwks.json Url"
    Value: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}/.well-known/jwks.json"

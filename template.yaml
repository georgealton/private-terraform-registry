Transform: AWS::Serverless-2016-10-31

Parameters:
  DomainName:
    Type: String
    Description: >
      Usually like terraform.<your parent domain>

  CertificateARN:
    Type: String
    Description: >
      If you already have a certificate in AWS Certificate Manager that covers the DomainName supply the ARN here. This will skip creation
      of a new certificate.
    Default: ""

  APIEndpointType:
    Type: String
    Description: >
      REGIONAL or EDGE . If using EDGE, the Certificate must be located in us-east-1. Either deploy the entire stack in us-east-1 or pass in the arn of a certificate in us-east-1.
    AllowedValues:
      - REGIONAL
      - EDGE
    Default: REGIONAL

Conditions:
  CreateCertificate: !Equals [!Ref CertificateARN, ""]
  RegionalAPIEndpoint: !Equals [!Ref APIEndpointType, REGIONAL]

Resources:
  Storage:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
            NoncurrentVersionExpirationInDays: 21
            Status: Enabled
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      Tags:
        - Key: Name
          Value: TFRegistry

  DB:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Name
          Value: TFRegistry

  Certificate:
    Condition: CreateCertificate
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      Tags:
        - Key: Name
          Value: TFRegistry

  APIDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !If
        - CreateCertificate
        - !Ref Certificate
        - !Ref CertificateARN
      EndpointConfiguration:
        Types:
          - !Ref APIEndpointType
      DomainName: !Ref DomainName
      Tags:
        - Key: Name
          Value: TFRegistry

  RegistryMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: /
      DomainName: !Ref DomainName
      RestApiId: !GetAtt API.RootResourceId
      Stage: main

  API:
    DependsOn:
      - Role
      - WebHookRole
    Type: AWS::Serverless::Api
    Properties:
      StageName: main
      EndpointConfiguration:
        Type: !Ref APIEndpointType
      DisableExecuteApiEndpoint: true
      MethodSettings:
        - ResourcePath: /*
          HttpMethod: "*"
          DataTraceEnabled: true
          LoggingLevel: ERROR
      Variables:
        registry_db: !Ref DB
        event_bus: !GetAtt EventBus.Arn
        github_host: github.com
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: openapi.yaml
      Tags:
        Name: TFRegistry

  Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DynamoDBAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub apigateway.${AWS::URLSuffix}
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DBRead
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                Resource: !GetAtt DB.Arn
      Tags:
        - Key: Name
          Value: TFRegistry

  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: TFRegistry

  WebHookRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EventBridgeAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub events.${AWS::URLSuffix}
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EventBridge
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: events:PutEvents
                Resource: !GetAtt EventBus.Arn

Outputs:
  APIDomainName:
    Condition: RegionalAPIEndpoint
    Description: Create a DNS record <DomainName> for pointing to this DomainName
    Value: !GetAtt APIDomainName.RegionalDomainName

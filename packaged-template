Transform: AWS::Serverless-2016-10-31
Parameters:
  DomainName:
    Type: String
    Description: "Usually like terraform.<your parent domain>\n"
  CertificateARN:
    Type: String
    Description: "If you already have a certificate in AWS Certificate Manager that\
      \ covers the DomainName supply the ARN here. This will skip creation of a new\
      \ certificate.\n"
    Default: ''
  APIEndpointType:
    Type: String
    Description: "REGIONAL or EDGE . When using EDGE, the Certificate must be located\
      \ in us-east-1. Either deploy the entire stack in us-east-1 or pass in the arn\
      \ of a certificate in us-east-1.\n"
    AllowedValues:
    - REGIONAL
    - EDGE
    Default: REGIONAL
Conditions:
  CreateCertificate:
    Fn::Equals:
    - Ref: CertificateARN
    - ''
  RegionalAPIEndpoint:
    Fn::Equals:
    - Ref: APIEndpointType
    - REGIONAL
Resources:
  Storage:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
        - AbortIncompleteMultipartUpload:
            DaysAfterInitiation: 7
          NoncurrentVersionExpirationInDays: 21
          Status: Enabled
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
        - ObjectOwnership: BucketOwnerEnforced
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      Tags:
      - Key: Name
        Value: TFRegistry
  DB:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
      - AttributeName: pk
        KeyType: HASH
      - AttributeName: sk
        KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: pk
        AttributeType: S
      - AttributeName: sk
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
      - Key: Name
        Value: TFRegistry
  Certificate:
    Condition: CreateCertificate
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName:
        Ref: DomainName
      ValidationMethod: DNS
      Tags:
      - Key: Name
        Value: TFRegistry
  APIDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      RegionalCertificateArn:
        Fn::If:
        - CreateCertificate
        - Ref: Certificate
        - Ref: CertificateARN
      EndpointConfiguration:
        Types:
        - Ref: APIEndpointType
      DomainName:
        Ref: DomainName
      Tags:
      - Key: Name
        Value: TFRegistry
  RegistryMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName:
        Ref: DomainName
      RestApiId:
        Ref: API
      Stage: main
  API:
    DependsOn:
    - Role
    - WebHookRole
    Type: AWS::Serverless::Api
    Properties:
      StageName: main
      EndpointConfiguration:
        Type:
          Ref: APIEndpointType
      DisableExecuteApiEndpoint: true
      MethodSettings:
      - ResourcePath: /*
        HttpMethod: '*'
        DataTraceEnabled: true
        LoggingLevel: ERROR
      Variables:
        registry_db:
          Ref: DB
        event_bus:
          Fn::GetAtt:
          - EventBus
          - Arn
        github_host: github.com
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: s3://cf-templates-1491x2vk47ot9-eu-west-1/19046b197c7ce698e338b65e5c9ecba2
      Tags:
        Name: TFRegistry
  Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DynamoDBAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              Fn::Sub: apigateway.${AWS::URLSuffix}
          Action: sts:AssumeRole
      Policies:
      - PolicyName: DBRead
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:Query
            Resource:
              Fn::GetAtt:
              - DB
              - Arn
      Tags:
      - Key: Name
        Value: TFRegistry
  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: TFRegistry
  WebHookRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EventBridgeAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              Fn::Sub: events.${AWS::URLSuffix}
          Action: sts:AssumeRole
      Policies:
      - PolicyName: EventBridge
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: events:PutEvents
            Resource:
              Fn::GetAtt:
              - EventBus
              - Arn
Outputs:
  APIDomainName:
    Condition: RegionalAPIEndpoint
    Description: Create a DNS record <DomainName> for pointing to this DomainName
    Value:
      Fn::GetAtt:
      - APIDomainName
      - RegionalDomainName

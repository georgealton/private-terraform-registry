Transform: AWS::Serverless-2016-10-31
Parameters:
  ParentDomain:
    Type: String
    Description: Your domain name, eh megacorp.com
  DomainName:
    Type: String
    Description: name of subdomain for registry, eg terraform
  CertificateARN:
    Type: String
    Description: "If you already have a certificate in AWS Certificate Manager that\
      \ covers the DomainName supply the ARN here. This will skip creation of a new\
      \ certificate.\n"
    Default: ''
  APIEndpointType:
    Type: String
    Description: "REGIONAL or EDGE . When using EDGE, the Certificate must be located\
      \ in us-east-1. Either deploy the entire stack in us-east-1 or pass in the arn\
      \ of a certificate in us-east-1.\n"
    AllowedValues:
    - REGIONAL
    - EDGE
    Default: REGIONAL
  SAMLMetadataURL:
    Type: String
    Default: ''
Conditions:
  CreateCertificate:
    Fn::Equals:
    - Ref: CertificateARN
    - ''
  RegionalAPIEndpoint:
    Fn::Equals:
    - Ref: APIEndpointType
    - REGIONAL
  SAMLIdP:
    Fn::Not:
    - Fn::Equals:
      - Ref: SAMLMetadataURL
      - ''
Resources:
  Storage:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
        - AbortIncompleteMultipartUpload:
            DaysAfterInitiation: 7
          NoncurrentVersionExpirationInDays: 21
          Status: Enabled
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
        - ObjectOwnership: BucketOwnerEnforced
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
  DB:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
      - AttributeName: pk
        KeyType: HASH
      - AttributeName: sk
        KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: pk
        AttributeType: S
      - AttributeName: sk
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
  Certificate:
    Condition: CreateCertificate
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName:
        Fn::Sub: ${DomainName}.${ParentDomain}
      ValidationMethod: DNS
  API:
    DependsOn:
    - Role
    - WebHookRole
    Type: AWS::Serverless::Api
    Properties:
      Domain:
        CertificateArn:
          Ref: Certificate
        DomainName:
          Fn::Sub: ${DomainName}.${ParentDomain}
      StageName: main
      EndpointConfiguration:
        Type:
          Ref: APIEndpointType
      DisableExecuteApiEndpoint: true
      MethodSettings:
      - ResourcePath: /*
        HttpMethod: '*'
        DataTraceEnabled: true
        LoggingLevel: ERROR
      Variables:
        registry_db:
          Ref: DB
        event_bus:
          Fn::GetAtt:
          - EventBus
          - Arn
        github_host: github.com
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: s3://cf-templates-1491x2vk47ot9-eu-west-1/1cbb03b552124fdfa3b257b24a0441ce
  Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DynamoDBAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              Fn::Sub: apigateway.${AWS::URLSuffix}
          Action: sts:AssumeRole
      Policies:
      - PolicyName: DBRead
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:Query
            Resource:
              Fn::GetAtt:
              - DB
              - Arn
          - Effect: Allow
            Action:
            - stepfunctions:StateExecution
            Resource:
              Fn::GetAtt:
              - GitHubWebHookRouter
              - Arn
  EventRouterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              Fn::Sub: states.${AWS::Region}.${AWS::URLSuffix}
          Action: sts:AssumeRole
      Policies:
      - PolicyName: WriteEvents
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - events:PutEvents
            Resource:
              Fn::GetAtt:
              - EventBus
              - Arn
  GitHubWebHookRouter:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionS3Location:
        Bucket: cf-templates-1491x2vk47ot9-eu-west-1
        Key: 7437136f1f6219b0fe0294c5fc2c2b7d
      RoleArn:
        Fn::GetAtt:
        - EventRouterRole
        - Arn
      TracingConfiguration:
        Enabled: true
  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: TFRegistry
  WebHookRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              Fn::Sub: events.${AWS::URLSuffix}
          Action: sts:AssumeRole
      Policies:
      - PolicyName: EventBridge
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: events:PutEvents
            Resource:
              Fn::GetAtt:
              - EventBus
              - Arn
  Authorizer:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: RegistryAuthorizer-${AWS::Region}
      Architectures:
      - arm64
      Handler: index.handler
      Code:
        ZipFile: "exports.handler = (event, context) => console.log(\"hello world\"\
          )\n"
      Runtime: nodejs16.x
      Role:
        Fn::GetAtt:
        - AuthorizerExecutionRole
        - Arn
      TracingConfig:
        Mode: Active
      MemorySize: 128
  AuthorizerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              Fn::Sub: lambda.${AWS::URLSuffix}
          Action: sts:AssumeRole
  UserPool:
    Type: AWS::Cognito::UserPool
  UserClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: USER_CLIENT
      UserPoolId:
        Ref: UserPool
      CallbackURLs:
      - http://localhost
      DefaultRedirectURI: http://localhost
      AllowedOAuthFlowsUserPoolClient: true
      ReadAttributes:
      - email
      AllowedOAuthFlows:
      - code
      AllowedOAuthScopes:
      - email
      - openid
      SupportedIdentityProviders:
      - Fn::If:
        - SAMLIdP
        - Ref: SAMLIdentityProvider
        - Ref: AWS::NoValue
  VCSClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: UserPool
      ClientName: VCS_CLIENT
  SAMLIdentityProvider:
    Condition: SAMLIdP
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      ProviderName: SAMLIdentityProvider
      ProviderType: SAML
      UserPoolId:
        Ref: UserPool
      ProviderDetails:
        MetadataURL:
          Ref: SAMLMetadataURL
      AttributeMapping:
        email: Attribute
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId:
        Ref: UserPool
      Domain:
        Ref: API
Outputs:
  OIDCWellKnownCOnfigurationUrl:
    Description: OIDC /.well-known/openid-configuration Url
    Value:
      Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}/.well-known/openid-configuration
  OIDCJWKSJSONUrl:
    Description: OIDC /.well-known/jwks.json Url"
    Value:
      Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}/.well-known/jwks.json

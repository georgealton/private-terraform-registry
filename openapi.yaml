openapi: 3.0.3
info:
  title: Private Terraform Registry
  version: 0.0.1

securityDefinitions:
  authorizer:
    type: apiKey
    name: Authorization
    in: header
    x-amazon-apigateway-authtype: oauth2
    x-amazon-apigateway-authorizer:
      type: token
      authorizerUri: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:RegistryAuthorizer-${AWS::Region}/invocations
      authorizerCredentials: arn:aws:iam::${AWS::AccountId}:role/
      identityValidationExpression: "^x-[a-z]+"
      authorizerResultTtlInSeconds: 60

paths:
  /.well-known/terraform.json:
    get:
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  modules.v1:
                    type: string
      x-amazon-apigateway-integration:
        type: mock
        httpMethod: GET
        requestTemplates:
          application/json: >-
            {"statusCode": 200}
        responses:
          200:
            statusCode: 200
            responseTemplates:
              application/json: >-
                {"modules.v1": "https://$context.domainName/terraform/modules/v1"}
  /terraform/modules/v1/{namespace}/{name}/{provider}/versions:
    get:
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                properties:
                  modules:
                    type: array
                    items:
                      type: object
                      properties:
                        versions:
                          type: array
                          items:
                            type: object
                            properties:
                              version:
                                type: string
        "404":
          description: no module is available with the requested namespace, name, and provider
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS
        uri: arn:${AWS::Partition}:apigateway:${AWS::Region}:dynamodb:action/Query
        credentials: arn:${AWS::Partition}:iam::${AWS::AccountId}:role/DynamoDBAccess
        requestTemplates:
          application/json: |
            #set($allParams = $input.params())
            #set($namespace = $util.escapeJavaScript($allParams.path.namespace))
            #set($name = $util.escapeJavaScript($allParams.path.name))
            #set($provider = $util.escapeJavaScript($allParams.path.provider))
            {
              "TableName": "$stageVariables.registry_db",
              "KeyConditionExpression": "#k0 = :v0 AND begins_with(#k1, :v1)",
              "ScanIndexForward": false,
              "ExpressionAttributeNames": {
                "#k0": "pk",
                "#k1": "sk",
                "#data": "data",
                "#version": "version"
              },
              "ExpressionAttributeValues": {
                ":v0": {
                  "S": "NAMESPACE#${namespace}#NAME#${name}#PROVIDER#${provider}"
                },
                ":v1": {
                  "S": "VERSION#"
                }
              },
              "ProjectionExpression": "#data.#version"
            }
        responses:
          200:
            statusCode: 200
            responseTemplates:
              application/json: >-
                #set($items = $input.path('$.Items'))
                #if($items.isEmpty())
                #set($context.responseOverride.status = 404)
                {"errors":["Not Found"]}
                #else
                {"modules":[{"versions":[#foreach($item in $items)#if($item.data.M.version.S != ""){"version":"$item.data.M.version.S"}#if( $foreach.hasNext ),#{end}#{end}#{end}]}]}
                #end
          default:
            statusCode: 500

  /terraform/modules/v1/{namespace}/{name}/{provider}/{version}/download:
    get:
      responses:
        "204":
          description: ""
          headers:
            X-Terraform-Get:
              schema:
                type: string
        "404":
          description: ""
          content:
            application/json:
              schema:
                properties:
                  errors:
                    type: array
                    items:
                      type: string

      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS
        uri: arn:${AWS::Partition}:apigateway:${AWS::Region}:dynamodb:action/GetItem
        credentials: arn:${AWS::Partition}:iam::${AWS::AccountId}:role/DynamoDBAccess
        requestTemplates:
          application/json: |
            #set($allParams = $input.params())
            #set($namespace = $util.escapeJavaScript($allParams.path.namespace))
            #set($name = $util.escapeJavaScript($allParams.path.name))
            #set($provider = $util.escapeJavaScript($allParams.path.provider))
            #set($version = $util.escapeJavaScript($allParams.path.version))
            {
              "TableName": "$stageVariables.registry_db",
              "Key": {
                "pk": {
                  "S": "NAMESPACE#${namespace}#NAME#${name}#PROVIDER#${provider}"
                },
                "sk": {
                  "S": "VERSION#${version}"
                }
              },
              "ProjectionExpression": "#data.#url",
              "ExpressionAttributeNames": {
                "#data": "data",
                "#url": "url"
              }
            }
        responses:
          200:
            statusCode: 204
            responseTemplates:
              application/json: |
                #set($item = $input.path('$.Item'))
                #set($url = $item.data.M.url.S)
                #if($url != "")
                #set($context.responseOverride.header.X-Terraform-Get = $url)
                #{else}
                #set($context.responseOverride.status = 404)
                {"errors":["Not Found"]}
                #end

  /webhooks/github:
    post:
      parameters:
        - name: X-GitHub-Event
          in: header
        - name: X-GitHub-Delivery
          in: header
        - name: X-Hub-Signature
          in: header
        - name: X-Hub-Signature-256
          in: header
        - name: User-Agent
          in: header

      responses:
        "202":
          description: ""
      x-amazon-apigateway-integration:
        type: http
        httpMethod: POST
        uri: https://webhook.site/6d91544e-83e4-4495-88f6-4fad91908488
        # type: AWS
        # uri: arn:aws:apigateway:${AWS::Region}:events:action/PutEvents
        # credentials:  arn:${AWS::Partition}:iam::${AWS::AccountId}:role/WebHookRole
        requestTemplates:
          application/json: >-
            #*
            Extract values from the incoming webhook
            *#
            #set($allParams = $input.params())
            #set($github_event = $allParams.header.x-github-event)
            #set($github_action = $input.path('$.action'))

            #set($module_version = 'module_version')
            #set($namespace = 'namespace')

            #set($detail = {})

            #* repository webhook events don't have `action` *#
            #if($github_action == "")
                #set($github_action = $input.path('$.ref_type'))
            #end

            #*
            Translate GitHub Events into Events
            *#
            #if($github_action == 'tag')
            ## https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#create
                #if($github_event == 'created')
                    #set($registry_action = 'module_version.released')
                #elseif($github_event == 'deleted')
                    #set($registry_action = 'module_version.released')
                #end

                $detail.put('namespace', "$input.path('$.repository.owner.login')")
                $detail.put('name', "$input.path('$.repository.name')")
                $detail.put('version', "$input.path('$.ref')")
                $detail.put('url', "https://$stageVariables.github_host/$input.path('$.repository.full_name')/archive/refs/tags/$input.path('$.ref').tar.gz")

            #elseif($github_event == "repository")
            ## https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#repository
                #if($github_event == 'created')
                    #set($registry_action = 'module.created')
                 #elseif($github_event == 'deleted')
                    #set($registry_action = 'module_version.released')
                 #end


                $detail.put('namespace', $input.path('$.repository.owner.login'))
                $detail.put('name', $input.path('$.repository.name'))

            #elseif($github_event == "installation")
            ## https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#installation

              #if($github_event == 'created')
                  #set($registry_action = 'module.created')
                #elseif($github_event == 'deleted')
                  #set($registry_action = 'module_version.released')
                #end

            #end

            #*
            Construct event

            No way to skip events going to the integration?
            *#
            {
              "Entries": [
                {
                    "Detail": {#foreach($key in $detail.keySet())
                      "$key": "$detail.get($key)"#if($foreach.hasNext),#end
                    #end},
                    "DetailType": "$registry_action.$github_action",
                    "EventBusName": "$stageVariables.event_bus",
                    "TraceHeader": "$allParams.header.x-amzn-trace-id"
                }
              ]
            }

        responses:
          default:
            statusCode: 202
            responseTemplates:
              application/json: >-
                Hi
